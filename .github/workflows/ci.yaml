name: ci

on:
  push:
    branches:
      - main

jobs:
  pypi:
    name: package build
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: install python3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: install poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: false
          virtualenvs-path: ~/my-custom-path
          installer-parallel: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: poetry install
      #----------------------------------------------
      # build the project
      #----------------------------------------------
      - name: build project
        run: poetry build -f sdist
      #----------------------------------------------
      # upload
      #----------------------------------------------
      - name: upload artifact
        run: |
          pip install twine
          twine upload --skip-existing --repository-url ${{ secrets.PYPI_REPOSITORY_URL }} --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }} dist/*.tar.gz
